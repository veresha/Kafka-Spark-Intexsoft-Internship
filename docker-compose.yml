version: "3.8"

networks:
  default:
    name: "exchange"

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9093:9093"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

  spark-kafka:
    build:
      context: .
      dockerfile: ./src/kafka_reader_app/Dockerfile
    container_name: spark-kafka
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8080:8080'
      - '7077:7077'
    networks:
      - default
    depends_on:
      - minio
    volumes:
      - ./data:/usr/src/data

  spark-worker:
    build:
      context: .
      dockerfile: ./src/kafka_reader_app/Dockerfile
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-kafka:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8081:8081'
    networks:
      - default
    depends_on:
      - spark-kafka
    volumes:
      - ./data:/usr/src/data

  minio:
    image: 'bitnami/minio:latest'
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    networks:
      - default

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        /usr/bin/mc alias set myminio ${MINIO_ENDPOINT} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
        /usr/bin/mc mb myminio/${MINIO_BUCKET_NAME};
        /usr/bin/mc policy set public myminio/${MINIO_BUCKET_NAME};
        exit 0;"

  spark-minio:
    build:
      context: .
      dockerfile: ./src/minio_reader_app/Dockerfile
    container_name: spark-minio
    environment:
      - SPARK_MASTER_PORT=7087
      - SPARK_MASTER_WEBUI_PORT=8082
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '7087:7087'
      - '8082:8082'
    networks:
      - default
    volumes:
      - ./data:/usr/src/data
    depends_on:
      - clickhouse
      - minio
    command: ["sh", "entrypoint-spark-minio.sh"]

  clickhouse:
    image: bitnami/clickhouse:latest
    container_name: clickhouse
    environment:
      - CLICKHOUSE_ADMIN_USER=default
      - ALLOW_EMPTY_PASSWORD=yes
      - CLICKHOUSE_HTTP_PORT=8123
    ports:
      - '8123:8123'
    networks:
      - default
    env_file:
      - .env
    volumes:
      - ./entrypoint-clickhouse.sh:/docker-entrypoint-initdb.d/entrypoint-clickhouse.sh
      - ./entrypoint-clickhouse.sh:/docker-entrypoint-startdb.d/entrypoint-clickhouse.sh
